# lab 6 Copt On Write

## 

Whenever there is a fork, we copy parent's memory to child
```c
  // Copy user memory from parent to child.
  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
    freeproc(np);
    release(&np->lock);
    return -1;
  }
```

after then, child may call exec
```c++
  if((pagetable = proc_pagetable(p)) == 0)
  // ...
  // Commit to the user image.
  oldpagetable = p->pagetable;
  p->pagetable = pagetable;
  p->sz = sz;
  p->trapframe->epc = elf.entry;  // initial program counter = main
  p->trapframe->sp = sp; // initial stack pointer
  proc_freepagetable(oldpagetable, oldsz);
```

this allocate a new page table, load to memory and discard old page table, mapping memory

We can improve 
1. share memory with parent at first place and set to read only
2. when need to modify content, trigger page fault, allocate a new page, copy page fault content to new page, set to read/write
3. what if the child process exit, but is still using parent memory space -> reference count